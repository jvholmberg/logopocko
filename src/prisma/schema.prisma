// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model RefreshToken {
  id                String          @id @default(cuid())
  userId            String
  token             String
  createdAt         DateTime        @default(now())
  createdByIp       String
  expiresAt         DateTime
  replacedByToken   String
  revokedAt         DateTime
  revokedByIp       String
  reasonRevoked     String
}
model User {
  id                String             @id @default(cuid())
  username          String
  password          String
  conversationUsers ConversationUser[]
  messages          Message[]
  deleted           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?
}

model Conversation {
  id                String             @id @default(cuid())
  name              String
  conversationUsers ConversationUser[]
  messages          Message[]
  deleted           Boolean            @default(false)
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?
}

model ConversationUser {
  userId            String
  user              User                    @relation(fields: [userId], references: [id])
  conversationId    String    
  conversation      Conversation            @relation(fields: [conversationId], references: [id])
  roleId            String    
  role              ConversationUserRole    @relation(fields: [roleId], references: [id])
  deleted           Boolean                 @default(false)
  createdAt         DateTime                @default(now())
  updatedAt         DateTime?

  @@id([userId, conversationId])
}

model ConversationUserRole {
  id               String             @id 
  name             String
  ConversationUser ConversationUser[]
}

model Message {
  id                String          @id @default(cuid())
  text              String
  conversationId    String
  conversation      Conversation    @relation(fields: [conversationId], references: [id])
  authorId          String
  author            User            @relation(fields: [authorId], references: [id])
  deleted           Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime?
}
